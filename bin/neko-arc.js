#!/usr/bin/env node

const chalk = require('chalk');
const { install } = require('../lib/installer');

// Neko-Arc ASCII Art
console.log(chalk.magenta.bold(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                               ‚ïë
‚ïë   üêæ‚ú® NEKO-ARC INSTALLER ‚ú®üêæ                                ‚ïë
‚ïë                                                               ‚ïë
‚ïë   Enhanced Claude Code Configuration                          ‚ïë
‚ïë   Dual Personality AI Assistant System                        ‚ïë
‚ïë                                                               ‚ïë
‚ïë   Featuring:                                                  ‚ïë
‚ïë   üêæ Neko-Arc  - Kawaii coding expert, nyaa~!                 ‚ïë
‚ïë   üé≠ Mario Gallo Bestino - Theatrical automation maestro!     ‚ïë
‚ïë                                                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`));

console.log(chalk.cyan('üêæ Nyaa~! Welcome to the Neko-Arc installation, desu~!\n'));
console.log(chalk.yellow('üé≠ Ah! The grand performance begins! Let us configure your stage!\n'));

// Parse command line arguments
const args = process.argv.slice(2);

if (args.includes('--help') || args.includes('-h')) {
  showHelp();
  process.exit(0);
}

if (args.includes('--version') || args.includes('-v')) {
  const pkg = require('../package.json');
  console.log(chalk.green(`v${pkg.version}`));
  process.exit(0);
}

// Run installation
install()
  .then(() => {
    console.log(chalk.magenta.bold('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
    console.log(chalk.magenta.bold('‚ïë  üéâ INSTALLATION COMPLETE! üéâ                        ‚ïë'));
    console.log(chalk.magenta.bold('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n'));

    console.log(chalk.green('‚úÖ Neko-Arc: Installed successfully, nyaa~! üêæ'));
    console.log(chalk.green('‚úÖ Mario: The stage is set magnificently! üé≠\n'));

    console.log(chalk.cyan('üìù Next Steps:'));
    console.log('   1. Restart Claude Code');
    console.log('   2. Create a .env file with your MongoDB credentials');
    console.log('   3. Start coding with dual-personality AI assistance!\n');

    console.log(chalk.yellow('üí° Tip: Check ~/CLAUDE.md for all behavioral rules and protocols!\n'));
  })
  .catch((error) => {
    console.error(chalk.red('\n‚ùå Installation failed!'));
    console.error(chalk.red(`Error: ${error.message}\n`));
    console.error(chalk.yellow('üí° Please report issues at: https://github.com/wakibaba/neko-arc/issues'));
    process.exit(1);
  });

function showHelp() {
  console.log(chalk.cyan('Usage:'));
  console.log('  npx @wakibaka/neko-arc          Install Neko-Arc configuration');
  console.log('  npx @wakibaka/neko-arc --help   Show this help message');
  console.log('  npx @wakibaka/neko-arc --version Show version number\n');

  console.log(chalk.cyan('What gets installed:'));
  console.log('  ‚Ä¢ ~/.claude.json       - MCP server configuration');
  console.log('  ‚Ä¢ ~/CLAUDE.md          - Master prompt with all rules');
  console.log('  ‚Ä¢ ~/.claude/hooks/     - Session startup hooks');
  console.log('  ‚Ä¢ ~/.env.example       - Environment variable template\n');

  console.log(chalk.yellow('üîí Security:'));
  console.log('  Your MongoDB credentials are NEVER stored in the package.');
  console.log('  You provide your own credentials during installation.\n');
}
